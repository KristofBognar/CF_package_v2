function [model, model_min] = SCIATRAN2_min_CI(data_path,simulation_type,plot_path)

% this function is to find the min CI in all RTM simulation
% need provide the data path that has all RTM simulation results
% data_path = 'H:\work\Eureka\GBS\CI\matlab\CF_package\database\';
%simulation_type = 'min_CI';
fig_size = 0.5; save_fig = 1;
%plot_path = ['H:\work\Eureka\GBS\CI\2010\UTGBS\plots\RTM\' simulation_type];
mkdir(plot_path);
file_nm = 'intensity.dat';
info_nm = 'output_map.inf';

cd(data_path);
file_list = ls;
file_list(1:2,:) = [];
N_files = size(file_list);
j = 1;model = table;model2 = table;h1 = figure; hold all;
for i = 1:1:N_files(1)
    try
        file_folder = strtrim(file_list(i,:));
        file_path = [data_path  file_folder '\'];
        
        intensity = importfile([file_path file_nm]);
        outputmap = importfile1([file_path info_nm]);
        
        data = intensity;
        data(:,1) = [];
        data = table2array(data);
        data = data';
        data = array2table(data);
        new_nm = num2str(intensity.wv);
        N = size(data);
        for i = 1:1:N(2)
            data.Properties.VariableNames{['data' num2str(i)]} = ['wv' new_nm(i,:)];
        end
        
        SZA = outputmap.SZA;
        
        
        %plot(SZA,data.wv360./data.wv550);
        %plot(SZA,data.wv405./data.wv550);
        plot(SZA,data.wv440./data.wv550);
        %plot(SZA,data.wv490./data.wv550);
        %legend('360/550 nm','405/550 nm','440/550 nm','490/550 nm');        
        xlabel('SZA');
        ylabel('CI');cd(plot_path);
        
        
        %% output
        
        eval(['model.SZA' num2str(j) ' = SZA;']);
        eval(['model.CI' num2str(j) ' = data.wv440./data.wv550;']);
        
        eval(['model2.CI' num2str(j) ' = data.wv440./data.wv550;']);
        
        j = j+1;
    end;
end;

min_CI = min(table2array(model2),[],2);

model_min = table;
model_min.SZA = model.SZA1;
model_min.CI = min_CI;

print_setting(fig_size, save_fig, ['RTM_CI_vs_SZA' simulation_type '_highlights']);
    %%
    function intensity = importfile(filename, startRow, endRow)
    %IMPORTFILE Import numeric data from a text file as a matrix.
    %   INTENSITY = IMPORTFILE(FILENAME) Reads data from text file FILENAME for
    %   the default selection.
    %
    %   INTENSITY = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows
    %   STARTROW through ENDROW of text file FILENAME.
    %
    % Example:
    %   intensity = importfile('intensity.dat', 3, 47);
    %
    %    See also TEXTSCAN.
    
    % Auto-generated by MATLAB on 2017/05/25 14:43:42
    
    %% Initialize variables.
    if nargin<=2
        startRow = 3;
        endRow = inf;
    end
    
    %% Format string for each line of text:
    %   column1: double (%f)
    %	column2: double (%f)
    %   column3: double (%f)
    %	column4: double (%f)
    %   column5: double (%f)
    %	column6: double (%f)
    %   column7: double (%f)
    %	column8: double (%f)
    %   column9: double (%f)
    %	column10: double (%f)
    %   column11: double (%f)
    %	column12: double (%f)
    %   column13: double (%f)
    %	column14: double (%f)
    %   column15: double (%f)
    %	column16: double (%f)
    %   column17: double (%f)
    %	column18: double (%f)
    % For more information, see the TEXTSCAN documentation.
    formatSpec = '%13f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%23f%f%[^\n\r]';
    
    %% Open the text file.
    fileID = fopen(filename,'r');
    
    %% Read columns of data according to format string.
    % This call is based on the structure of the file used to generate this
    % code. If an error occurs for a different file, try regenerating the code
    % from the Import Tool.
    dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
    for block=2:length(startRow)
        frewind(fileID);
        dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
        for col=1:length(dataArray)
            dataArray{col} = [dataArray{col};dataArrayBlock{col}];
        end
    end
    
    %% Close the text file.
    fclose(fileID);
    
    %% Post processing for unimportable data.
    % No unimportable data rules were applied during the import, so no post
    % processing code is included. To generate code which works for
    % unimportable data, select unimportable cells in a file and regenerate the
    % script.
    
    %% Create output variable
    intensity = table(dataArray{1:end-1}, 'VariableNames', {'wv','VarName2','VarName3','VarName4','VarName5','VarName6','VarName7','VarName8','VarName9','VarName10','VarName11','VarName12','VarName13','VarName14','VarName15','VarName16','VarName17','VarName18'});
    
    %%
        function outputmap = importfile1(filename, startRow, endRow)
            %IMPORTFILE1 Import numeric data from a text file as a matrix.
            %   OUTPUTMAP = IMPORTFILE1(FILENAME) Reads data from text file FILENAME
            %   for the default selection.
            %
            %   OUTPUTMAP = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from
            %   rows STARTROW through ENDROW of text file FILENAME.
            %
            % Example:
            %   outputmap = importfile1('output_map.inf', 5, 21);
            %
            %    See also TEXTSCAN.
            
            % Auto-generated by MATLAB on 2017/05/25 14:57:17
            
            %% Initialize variables.
            if nargin<=2
                startRow = 5;
                endRow = inf;
            end
            
            %% Format string for each line of text:
            %   column1: double (%f)
            %	column2: double (%f)
            %   column3: double (%f)
            %	column4: double (%f)
            %   column5: double (%f)
            % For more information, see the TEXTSCAN documentation.
            formatSpec = '%4f%8f%8f%8f%f%[^\n\r]';
            
            %% Open the text file.
            fileID = fopen(filename,'r');
            
            %% Read columns of data according to format string.
            % This call is based on the structure of the file used to generate this
            % code. If an error occurs for a different file, try regenerating the code
            % from the Import Tool.
            dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
            for block=2:length(startRow)
                frewind(fileID);
                dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
                for col=1:length(dataArray)
                    dataArray{col} = [dataArray{col};dataArrayBlock{col}];
                end
            end
            
            %% Close the text file.
            fclose(fileID);
            
            %% Post processing for unimportable data.
            % No unimportable data rules were applied during the import, so no post
            % processing code is included. To generate code which works for
            % unimportable data, select unimportable cells in a file and regenerate the
            % script.
            
            %% Create output variable
            outputmap = table(dataArray{1:end-1}, 'VariableNames', {'no','SZA','LOS','AZ','alt'});
            
