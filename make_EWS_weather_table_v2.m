function EWS = make_EWS_weather_table_v2(EWS_raw_data_folder)
load_raw_data = 1;
weather_data = 'H:\work\Eureka\Eureka_weather_station\EWS_weather2010.mat'; % if load_raw_data == 0, will load weather data from mat file

if load_raw_data == 1;
    %raw_data_folder = 'H:\work\Eureka\Eureka_weather_station\2010';
    %EWS_raw_data_folder = 'H:\work\Eureka\Eureka_weather_station\2011';
    cd(EWS_raw_data_folder);
    file_list = ls;
    N = size(file_list) - 2;
    EWS = table;
    for i =1:1:N(1)
        filename = file_list(i+2,:);
        EWS_weather = importfile(filename);
        if ~isempty(EWS)
            EWS = [EWS;EWS_weather];
        else
            EWS = EWS_weather;
        end
    end
else
    load(weather_data);
end
%% filter out hours without weather condition noted
N = size(EWS);
TF = strcmp(EWS.Weather , '');
missing_weather_records = sum(TF);
p_missing_weather_records = missing_weather_records./N(1)*100;
disp([num2str(missing_weather_records) ' hrs weather data are missing from records']);
disp([num2str(p_missing_weather_records) ' % of records']);
EWS(TF,:) = [];

%% add more weather labels
weather_type = unique(EWS.Weather);
N = size(EWS);
% clear level 1 = only "Clear" is clear weather
% clear level 2 = "Clear" & "Mainly Clear" are both clear weather
% clear level 3 = "Clear" & "Mainly Clear" & "Ice Crystals" are all clear weather
for i = 1:1:N(1)
    %if strcmp( EWS.Weather(i) , 'Clear' ) | strcmp( EWS.Weather(i) , 'Mainly Clear' );
    if strcmp( EWS.Weather(i) , 'Clear' ) ;
        EWS.Weather_simple_clearL1(i) = 0;
        EWS.Weather_simple_clearL2(i) = 0;
        EWS.Weather_simple_clearL3(i) = 0;
    elseif strcmp( EWS.Weather(i) , 'Mainly Clear' ) ;
        EWS.Weather_simple_clearL1(i) = 1;
        EWS.Weather_simple_clearL2(i) = 0;
        EWS.Weather_simple_clearL3(i) = 0;
    elseif strcmp( EWS.Weather(i) , 'Ice Crystals' ) ;
        EWS.Weather_simple_clearL1(i) = 1;
        EWS.Weather_simple_clearL2(i) = 1;
        EWS.Weather_simple_clearL3(i) = 0;
    else
        EWS.Weather_simple_clearL1(i) = 1;
        EWS.Weather_simple_clearL2(i) = 1;
        EWS.Weather_simple_clearL3(i) = 1;
    end
end

% cloudy level 1 = only "Cloudy" is cloudy weather
% cloudy level 2 = "Cloudy" & "Mostly Cloudy" are both cloudy weather
for i = 1:1:N(1)
    if strcmp( EWS.Weather(i) , 'Cloudy' ) ;
        EWS.Weather_simple_cloudyL1(i) = 1;
        EWS.Weather_simple_cloudyL2(i) = 1;
    elseif strcmp( EWS.Weather(i) , 'Mostly Cloudy' ) ;
        EWS.Weather_simple_cloudyL1(i) = 0;
        EWS.Weather_simple_cloudyL2(i) = 1;
    else
        EWS.Weather_simple_cloudyL1(i) = 0; 
        EWS.Weather_simple_cloudyL2(i) = 0; 
    end
end
 

        

%%
function enghourly0201201002282010 = importfile(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as a matrix.
%   ENGHOURLY0201201002282010 = IMPORTFILE(FILENAME) Reads data from text
%   file FILENAME for the default selection.
%
%   ENGHOURLY0201201002282010 = IMPORTFILE(FILENAME, STARTROW, ENDROW)
%   Reads data from rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   enghourly0201201002282010 = importfile('eng-hourly-02012010-02282010.csv', 16, 687);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2017/06/06 14:39:57

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 16;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r','n','UTF-8');
% Skip the BOM (Byte Order Mark).
fseek(fileID, 3, 'bof');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,7,9,11,13,15,17,19,23]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{5} = datetime(dataArray{5}, 'Format', 'HH:mm', 'InputFormat', 'HH:mm');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{5} = cellfun(@(x) x(2:end-1), dataArray{5}, 'UniformOutput', false);
        dates{5} = datetime(dataArray{5}, 'Format', 'HH:mm', 'InputFormat', 'HH:mm');
    catch
        dates{5} = repmat(datetime([NaN NaN NaN]), size(dataArray{5}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{5});
anyInvalidDates = isnan(dates{5}.Hour) - anyBlankDates;
dates = dates(:,5);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,7,9,11,13,15,17,19,23]);
rawCellColumns = raw(:, [1,6,8,10,12,14,16,18,20,21,22,24,25]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
enghourly0201201002282010 = table;
enghourly0201201002282010.DateTime = rawCellColumns(:, 1);
enghourly0201201002282010.Year = cell2mat(rawNumericColumns(:, 1));
enghourly0201201002282010.Month = cell2mat(rawNumericColumns(:, 2));
enghourly0201201002282010.Day = cell2mat(rawNumericColumns(:, 3));
enghourly0201201002282010.Time = dates{:, 1};
enghourly0201201002282010.DataQuality = rawCellColumns(:, 2);
enghourly0201201002282010.TempC = cell2mat(rawNumericColumns(:, 4));
enghourly0201201002282010.TempFlag = rawCellColumns(:, 3);
enghourly0201201002282010.DewPointTempC = cell2mat(rawNumericColumns(:, 5));
enghourly0201201002282010.DewPointTempFlag = rawCellColumns(:, 4);
enghourly0201201002282010.RelHum = cell2mat(rawNumericColumns(:, 6));
enghourly0201201002282010.RelHumFlag = rawCellColumns(:, 5);
enghourly0201201002282010.WindDir10sdeg = cell2mat(rawNumericColumns(:, 7));
enghourly0201201002282010.WindDirFlag = rawCellColumns(:, 6);
enghourly0201201002282010.WindSpdkmh = cell2mat(rawNumericColumns(:, 8));
enghourly0201201002282010.WindSpdFlag = rawCellColumns(:, 7);
enghourly0201201002282010.Visibilitykm = cell2mat(rawNumericColumns(:, 9));
enghourly0201201002282010.VisibilityFlag = rawCellColumns(:, 8);
enghourly0201201002282010.StnPresskPa = cell2mat(rawNumericColumns(:, 10));
enghourly0201201002282010.StnPressFlag = rawCellColumns(:, 9);
enghourly0201201002282010.Hmdx = rawCellColumns(:, 10);
enghourly0201201002282010.HmdxFlag = rawCellColumns(:, 11);
enghourly0201201002282010.WindChill = cell2mat(rawNumericColumns(:, 11));
enghourly0201201002282010.WindChillFlag = rawCellColumns(:, 12);
enghourly0201201002282010.Weather = rawCellColumns(:, 13);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% enghourly0201201002282010.Time=datenum(enghourly0201201002282010.Time);

